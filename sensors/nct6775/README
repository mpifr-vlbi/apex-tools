Note
====

This driver supercedes the NCT6775F and NCT6776F support in the W83627EHF
driver. It supports NCT6106D, NCT6775F, NCT6776F, NCT6779D, and NCT6791D.

The driver is also available in the upstream kernel. This version is maintained
for backward compatibility with older kernels. I am trying to keep it buildable
for older kernels, but may miss a problem once in a while. If you have a problem
compiling this driver with any kernel version 2.6.16 or later, please let me
know. 

Kernel driver NCT6775
=======================

Supported chips:
  * Nuvoton NCT6102D/NCT6104D/NCT6106D
    Prefix: 'nct6106'
    Addresses scanned: ISA address retrieved from Super I/O registers
    Datasheet: Available from Nuvoton upon request
  * Nuvoton NCT6775F/W83667HG-I
    Prefix: 'nct6775'
    Addresses scanned: ISA address retrieved from Super I/O registers
    Datasheet: Available from Nuvoton upon request
  * Nuvoton NCT6776F
    Prefix: 'nct6776'
    Addresses scanned: ISA address retrieved from Super I/O registers
    Datasheet: Available from Nuvoton upon request
  * Nuvoton NCT6779D
    Prefix: 'nct6779'
    Addresses scanned: ISA address retrieved from Super I/O registers
    Datasheet: Available from Nuvoton upon request
  * Nuvoton NCT6791D
    Prefix: 'nct6791'
    Addresses scanned: ISA address retrieved from Super I/O registers
    Datasheet: Available from Nuvoton upon request

Authors:
        Guenter Roeck <linux@roeck-us.net>
        David Bartley <andareed@gmail.com> (NCT6791D support)

Description
-----------

This driver implements support for the Nuvoton NCT6106D, NCT6775F, NCT6776F,
NCT6779D, and NCT6791D super I/O chips. We will refer to them collectively as
Nuvoton chips.

The chips implement up to 8 temperature sensors depending on the chip type and
configuration. Temperatures used to control fan speed are reported separately.
There are 4 to 5 fan rotation speed sensors, 8 to 15 analog voltage sensors,
one VID, alarms with beep warnings (control unimplemented), and some automatic
fan regulation strategies (plus manual fan control mode).

The temperature sensor sources on all chips are configurable. temp4 and higher
attributes are only reported if its temperature source differs from the
temperature sources of the already reported temperature sensors.
The configured source for each of the temperature sensors is provided
in tempX_label.

Temperatures are measured in degrees Celsius and measurement resolution is
either 1 degC or 0.5 degC, depending on the temperature source and
configuration. An alarm is triggered when the temperature gets higher than
the high limit; it stays on until the temperature falls below the hysteresis
value. Alarms are only supported for temp1, temp2, and temp3.

Fan rotation speeds are reported in RPM (rotations per minute). An alarm is
triggered if the rotation speed has dropped below a programmable limit. Fan
readings can be divided by a programmable divider (1, 2, 4, 8, 16, 32, 64 or
128) to give the readings more range or accuracy. The driver sets the most
suitable fan divisor itself. Some fans might not be present because they
share pins with other functions.

Voltage sensors (also known as IN sensors) report their values in millivolts.
An alarm is triggered if the voltage has crossed a programmable minimum
or maximum limit.

The driver supports automatic fan control mode known as Thermal Cruise.
In this mode, the chip attempts to keep the measured temperature in a
predefined temperature range. If the temperature goes out of range, fan
is driven slower/faster to reach the predefined range again.

The mode works for fan1-fan5.

sysfs attributes
----------------

name - this is a standard hwmon device entry, it contains the name of
       the device (see the prefix in the list of supported devices at
       the top of this file)

pwm[1-5] - this file stores PWM duty cycle or DC value (fan speed) in range:
	   0 (stop) to 255 (full)

pwm[1-5]_enable - this file controls mode of fan/temperature control:
	* 0 Fan control disabled (fans set to maximum speed)
	* 1 Manual mode, write to pwm file any value 0-255 (full speed)
	* 2 "Thermal Cruise" mode
	* 3 "Fan Speed Cruise" mode
	* 4 "Smart Fan III" mode (NCT6775F only)
	* 5 "Smart Fan IV" mode

pwm[1-5]_mode - controls if output is PWM or DC level
        * 0 DC output (0 - 12v)
        * 1 PWM output

Common fan control attributes
-----------------------------

pwm[1-5]_temp_sel	Temperature source. Value is temperature sensor index.
			For example, select '1' for temp1_input.
pwm[1-5]_weight_temp_sel
			Secondary temperature source. Value is temperature
			sensor index. For example, select '1' for temp1_input.
pwm[1-5]_weight_enable	Set to 1 to enable secondary temperature control.

If secondary temperature functionality is enabled, it is controlled with the
following attributes.

pwm[1-5]_weight_duty_step
			Duty step size.
pwm[1-5]_weight_temp_step
			Temperature step size. With each step over
			temp_step_base, the value of weight_duty_step is added
			to the current pwm value.
pwm[1-5]_weight_temp_step_base
			Temperature at which secondary temperature control kicks
			in.
pwm[1-5]_weight_temp_step_tol
			Temperature step tolerance or hysteresis. This is a
			relative value.


Thermal Cruise mode (2)
-----------------------

If the temperature is in the range defined by:

pwm[1-5]_target 	Target temperature, unit millidegree Celsius
			(range 0 - 127000)
pwm[1-5]_auto_temp1_hyst
			Hysteresis, unit millidegree Celsius
			Hysteresis value is relative to pwm[1-5]_auto_temp1.

there are no changes to fan speed. Once the temperature leaves the interval,
fan speed increases (temp is higher) or decreases if lower than desired,
using the following steps and times.

pwm[1-5]_start_output	fan pwm start value (range 1 - 255), to start fan
			when the temperature is above defined range.
pwm[1-5]_stop_output	lowest fan pwm (range 1 - 255) if temperature is below
			the defined range.
pwm[1-5]_stop_output_enable
			Set to 1 to enable pwm[1-5]_stop_output. If disabled
			(set to 0), the fan will stop if the temperature is
			below the defined range.
pwm[1-5]_step_up_time	milliseconds [ms] before fan speed is increased
pwm[1-5]_step_down_time	milliseconds [ms] before fan speed is decreased
pwm[1-5]_stop_time	how many milliseconds [ms] must elapse to switch
                      	corresponding fan off (when the temperature was below
                      	defined range).

Speed Cruise mode (3)
---------------------

This modes tries to keep the fan speed constant.
Untested; use at your own risk.

Smart Fan IV mode (5)
---------------------

The fan is regulated to maintain a target temperature. There are five data
points. Subsequent data points should be set to higher temperatures and higher
pwm values to achieve higher fan speeds with increasing temperature. The last
data point reflects critical temperature mode, in which the fans should run at
full speed.

pwm[1-5]_auto_point[1-5]_pwm
			pwm value to be set if temperature reaches matching
			temperature range.
pwm[1-5]_auto_point[1-5]_temp
			Temperature at which the matching pwm is enabled.
pwm[1-5]_step_up_time	milliseconds [ms] before fan speed is increased
pwm[1-5]_step_down_time	milliseconds [ms] before fan speed is decreased


Usage Notes
-----------

On various ASUS boards with NCT6776F, it appears that CPUTIN is not really
connected to anything and floats, or that it is connected to some non-standard
temperature measurement device. As a result, the temperature reported on CPUTIN
will not reflect a usable value. It often reports unreasonably high
temperatures, and in some cases the reported temperature declines if the actual
temperature increases (similar to the raw PECI temperature value - see PECI
specification for details). CPUTIN should therefore be be ignored on ASUS
boards. The CPU temperature on ASUS boards is reported from PECI 0.

Also, there have been reports that not all fan speeds are reported on at least
some ASUS boards. P9X79 WS is one example, where fan speed is only reported
for two of the fans on the board.

Note that ASUS does not support Linux on desktop boards (this appears to be
official ASUS policy) and does not release board specifications, so there is
nothing we can do to improve support for such boards unless we get board
specifications or a detailed description on how to control the fans on the
affected boards.

Known Problems
--------------

After a suspend/resume cycle, all fan control settings are restored to the BIOS
defaults.
