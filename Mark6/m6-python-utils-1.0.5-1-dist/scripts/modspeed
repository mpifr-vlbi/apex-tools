#!/usr/bin/python
#
# modspeed - will set up a module and run scatspeed to measure disk performance
#
# initial code                                     rjc  2013.11.4
# FIXME - make sure c-server is running; start up if necessary

import optparse
import os
import socket
import string
import subprocess
import sys

from sublib import cplane_command
from sublib import cplane_running

# default parameters
DEFAULT_SLOT = 1
DEFAULT_CPLANE_PORT = 14242
DEFAULT_CPLANE_HOST = '127.0.0.1'

f = [0] * 8         # initialize a disk# tuple

usage_text = 'Usage: %prog [options]\n  measures the write speed of a mk6 module'
parser = optparse.OptionParser(usage=usage_text)
parser.add_option(
    '-g', '--gb', dest='gb', help='gigabytes to write (60)',
    default='60')
parser.add_option(
    '-i', '--ip', dest='host', help='mk6 host ip (127.0.0.1)',
    default=DEFAULT_CPLANE_HOST)
parser.add_option(
    '-p', '--port', dest='port', help='mk6/cplane port (14242)',
    default=DEFAULT_CPLANE_PORT)
parser.add_option(
    '-s', '--slot', dest='slot', help='module slot (1)',
    default=DEFAULT_SLOT)
parser.add_option(
    '-v', '--verbose', action='store_true', dest='verbose', help='verbose mode (false)',
    default=False)

(opts, args) = parser.parse_args()

if opts.verbose:
    print '\nusing slot', opts.slot, '  host', opts.host, '  port', opts.port 

                    # check to be sure that cplane is running, otherwise quit
if cplane_running () == False:
    print "FATAL ERROR - c-server not running, quitting"
    exit(1)

                    # open up tcp socket to cplane
for res in socket.getaddrinfo(opts.host, opts.port, socket.AF_INET, socket.SOCK_STREAM):
    af, socktype, proto, canonname, sa = res

    try:
        s = socket.socket(af,socktype, proto)
    except socket.error, msg:
        print 'ERROR socket could not be configured: ', msg
        sys.exit(0)
    
    try:
        s.connect(sa)
    except socket.error, msg:
        print '\nERROR socket could not connect to: ', opts.host
        s.close()
        print msg, '\n'
        sys.exit(0)
if opts.verbose:
    print 'socket to c-plane successfully opened'

init_state = ''     # set initial state of module to null

(group, slot, msn, ndisks, ndnom, memleft, memtot, stat1, stat2, mode) \
     = cplane_command ('mstat? ' + str (opts.slot) + ';', s, opts)

mode = mode[:-2]

                    # calculate percentage of module filled
if memleft == '-':
    pct = '??'      # unknown - not yet mounted
else:
    pct = int (100 * (1 - float(memleft) / float(memtot)))

if opts.verbose:
    print 'slot', slot, '  msn', msn, '  #disks' , ndisks, '  %used', pct, '   mode', mode

if group == '-':
                    # need to form group of 1 for mounting
    init_state = 'ungrouped'
    if opts.verbose:
        print 'forming a group of 1 in slot' + str(opts.slot)
    group = cplane_command ('group = new:' + str(opts.slot) + ';', s, opts)

                    # mount the module if it isn't already mounted
if stat1 == 'unmounted':
    if init_state == '':
        init_state = 'unmounted'
    if opts.verbose:
        print 'mounting module as group ' + str(opts.slot)
    group  = cplane_command ('group = mount:' + str(opts.slot) + ';', s, opts)

                    # open the module for recording
if stat1 != 'open':
    if init_state == '':
        init_state = 'unopened'
    if opts.verbose:
        print 'opening module as group ' + str(opts.slot)
    group  = cplane_command ('group = open:' + str(opts.slot) + ';', s, opts)

scatspeed = './scatspeed'

if mode == 'sg':
    if opts.verbose:
        print 'measuring in scatter-gather mode'
    path = '/mnt/disks/'

    for i in range(8):
        f[i] = path + str(opts.slot) + '/' + str (i) + '/' + 'speedfile'

    if opts.verbose:
        print             scatspeed, opts.gb, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7] 
    subprocess.call ([scatspeed, opts.gb, f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]])
else:
    if opts.verbose:
        print 'measuring in raid mode'
    path = '/mnt/raid/'
    f[0] = path + 'speedfile'
    subprocess.call ([scatspeed, opts.gb, f[0]])

                    # clean up, leaving module in same state as it started

                    # close the module wrt recording?
if init_state in ('unopened', 'unmounted', 'ungrouped'):
    if opts.verbose:
        print 'closing module as group ' + str(opts.slot)

    group  = cplane_command ('group = close:' + str(opts.slot) + ';', s, opts)

                    # ungroup the module?
                    # must be done prior to unmount
if init_state == 'ungrouped':
    if opts.verbose:
        print 'ungrouping group ' + str(opts.slot)
    # for now, do low level ungroup, as cplane's ungroup command is NYI
    # group  = cplane_command ('group = ungroup:' + str(opts.slot) + ';')
    for i in range(8):
        filnam = '/mnt/disks/.meta/'+ str(opts.slot) + '/' + str(i) + '/group'
        os.remove(filnam)

                    # unmount the module?
if init_state in ('unmounted', 'ungrouped'):
    if opts.verbose:
        print 'unmounting group ' + str(opts.slot)

    group  = cplane_command ('group = unmount:' + str(opts.slot) + ';', s, opts)

s.close()           # close the socket to cplane
for i in range(8):  # delete all of the speedfiles
    os.remove (f[i])

if opts.verbose:
    print 'modspeed finished'

