#!/usr/bin/python
#
# gator - accesses (potentially multiple) m6 filesets, runs
#         gather on them if necessary, and creates output
#         file(s) on a destination fileserver (often RAID)
#
# initial code                                    rjc 2013.11.5

import glob
import optparse
import os
import socket
import string
import subprocess
import sys

from sublib import cplane_command
from sublib import cplane_running

# default parameters
DEFAULT_CPLANE_PORT = 14242
DEFAULT_CPLANE_HOST = '127.0.0.1'

f = [0] * 8         # create a disk# tuple

usage_text = '\n  %prog [options] <group> "<wild_carded_input_files>" <destination_path>' \
             '\n  gathers multiple m6 filesets and writes them to raid' \
             '\n  note that double quotes are needed around the input file expression' \
             '\n  iff the expression contains *, [], or ? symbols' \
             '\n  example:   gator.py 12 "scan01[0-3].m5b" /data/2345/westford/'
parser = optparse.OptionParser(usage=usage_text)
parser.add_option(
    '-f', '--force', action='store_true', dest='force', help='force overwrite of duplicate output files (false)',
    default=False)
parser.add_option(
    '-i', '--ip', dest='host', help='mk6 host ip (127.0.0.1)',
    default=DEFAULT_CPLANE_HOST)
parser.add_option(
    '-p', '--port', dest='port', help='mk6/cplane port (14242)',
    default=DEFAULT_CPLANE_PORT)
parser.add_option(
    '-q', '--quit', action='store_true', dest='quit', help='quit if an error is encountered (false)',
    default=False)
parser.add_option(
    '-v', '--verbose', action='store_true', dest='verbose', help='verbose mode (false)',
    default=False)

(opts, args) = parser.parse_args()

if len(args) != 3:
    print "use -h option for help"
    exit(0)

if opts.verbose:
    print '\ncplane accessed at ', opts.host, '  port', opts.port 
    print 'opts: ', opts
    print 'args: ', args

ingroup, infile_pattern, outfile_dest = args

                    # check to be sure that cplane is running, otherwise quit
if cplane_running () == False:
    print 'FATAL ERROR - c-server not running, quitting'
    exit(1)

                    # add slash to destination path, if one isn't already there
if outfile_dest[len(outfile_dest)-1] != '/':
    outfile_dest += '/';
                    # ensure that output destination path exists, quit if it doesn't
if os.path.exists (outfile_dest) == False:
    print 'FATAL ERROR - output path ' + outfile_dest + ' does not exist'
    exit (1)

                    # open up tcp socket to cplane
for res in socket.getaddrinfo(opts.host, opts.port, socket.AF_INET, socket.SOCK_STREAM):
    af, socktype, proto, canonname, sa = res

    try:
        s = socket.socket(af,socktype, proto)
    except socket.error, msg:
        print 'ERROR socket could not be configured: ', msg
        sys.exit(0)
    
    try:
        s.connect(sa)
    except socket.error, msg:
        print '\nERROR socket could not connect to: ', o.host
        s.close()
        print msg, '\n'
        sys.exit(0)
if opts.verbose:
    print 'socket to c-plane successfully opened'
                    # check the status of the group
(group, slot, msn, ndisks, ndnom, memleft, memtot, stat1, stat2, mode) \
     = cplane_command ('mstat? ' + ingroup + ';', s, opts)

                    # trim off lf and ;
mode = mode[mode.rfind(':')+1:mode.find(';')]

if opts.verbose:
    print 'slot', slot, '  msn', msn, '  #disks' , ndisks, '%   stat1', stat1, '  mode', mode

init_state = ''
                    # mount the module if it isn't already mounted
if stat1 == 'unmounted':
    init_state = 'unmounted'
    if opts.verbose:
        print 'mounting module as group ' + ingroup
    group  = cplane_command ('group = mount:' + ingroup + ';', s, opts)

                    # expand infile_pattern according to mode
if mode == 'sg':
    exp_infile_pattern = '/mnt/disks/[' + group + ']/[0-7]/' + infile_pattern
elif mode == 'raid':
    exp_infile_pattern = '/mnt/raid/' + infile_pattern
else:
    print "don't know how to generate input filenames for mode", mode
    exp_infile_pattern = ''
    
                    # form list of all input files matching wildcard spec
all_files = glob.glob (exp_infile_pattern);

                    # form list with path names removed
fnames = []
for phyle in all_files:
    fields = phyle.split('/')
    fnames.append (fields[len(fields)-1])
                    # remove duplicates and sort the resulting scan list
scans = list (set (fnames))
scans.sort()
print 'gathering', len(scans), 'scans'
                    # loop over all desired scans
for scan in scans:
    print 'processing', scan
                    # find all input files for this scan
    scan_filenames = []
    for a_file in all_files:
        if scan in a_file:
            scan_filenames.append (a_file)

    out_filename = outfile_dest + scan

                    # unless forced, ensure the output file won't be overwritten
    if opts.force == False:
        if os.path.isfile (out_filename):
            print 'output file', out_filename, 'exists, skipping scan'
            continue

                    # gather this scan together onto output
    gather_command = ['gather'] + scan_filenames + [out_filename]
    if opts.verbose:
        print gather_command
    rc = subprocess.call (gather_command)

                    # handle error if there was one
    if rc != 0:
        print 'ERROR - return code ' + rc + ' from gather'
        if opts.quit:
            print 'gator terminating due to error since quit was set'
            break

                    # unmount the module?
if init_state == 'unmounted':
    if opts.verbose:
        print 'unmounting group ' + ingroup

    group  = cplane_command ('group = unmount:' + ingroup + ';', s, opts)


                    # close the cplane socket and quit
s.close()
print 'gator finished'
