#!/bin/bash
#
# --- SET UP THE IRQS SO THEY APPEAR ON DIFFERENT PROCESSORS
# --- CPU0 CPU1 CPU2   CPU3   CPU4   CPU5    ...
#     sas  sas  spool0 spool1 spool2 spool3
#               eth?   eth?   eth?   eth?
# --- THIS VERSION USES /ETC/DEFAULT/MARK6 FOR THE MK6_OPTS FOR THE INTERFACES,
#     IF THE FILE DOES NOT EXIST IT ASSUMES eth2,eth3,eth4 and eth5 FOR THE
#     USED INTERFACES.
#
# TODO: use an argument to adjust a subset of irq affinities;
#       then it can be used in /etc/network/interfaces for ifup.
#
export PATH=/usr/bin:$PATH

# --- REMOVE pf_ring driver
echo Reloading pf_ring driver $DRVR...
echo rmmod pf_ring
rmmod pf_ring
sleep 2
echo modprobe pf_ring
modprobe pf_ring 
sleep 2

# --- FIND 10GbE driver
if [ -s "/etc/default/mark6" ] ; then
    DRVR=$(awk '$1~/^MK6_DRVR=/ {print $0;exit;}' /etc/default/mark6 | cut -d= -f2)
fi
if [ -z "$DRVR" ] ; then
    DRVR=myri10ge
fi
echo Reloading 10GbE driver $DRVR...
echo rmmod $DRVR
rmmod $DRVR
# ---  REQUIRED FOR BUG ON SOME SYSTEMS THE DRIVER IS NOT REMOVED BE MODPROBE IS 
# EXECUTED.  THE RESULTS IS ETH0 DOES NOT COME UP AND ACCESS TO THE SYSTEM
# IS DISABLED.
sleep 2       

echo modprobe $DRVR ${DRVR}_initial_mtu=9000
modprobe $DRVR ${DRVR}_initial_mtu=9000
sleep 2

# if only half the cores are physical
#CORES=`cat /proc/cpuinfo | grep processor | tail -1 | awk '{print ($3+1)/2}'`
PHYS=$((`grep core.id /proc/cpuinfo | sort -n | uniq | tail -1 | cut -d: -f2`+1))
CORES=`nproc --all`
echo There are $PHYS physical cpu cores with $CORES interrupt lines
limit=1
while [ $CORES -gt 0 ]
do
    limit=$((limit * 2))
    CORES=$((CORES - 1))
done

IFS=$'\n'
MIRQS=$(cat /proc/interrupts | grep mpt2sas | awk '{print $1}' | sed 's/://')
echo Discovered irqs for mptsas: $MIRQS

mask=1
for IRQ in $MIRQS; do 
    echo MIRQ is $IRQ, mask is $mask
    echo $(printf "%x" $mask) >> /proc/irq/$IRQ/smp_affinity 
    mask=$(( mask * 2))
    if [ $mask -ge $limit ]; then
        mask=1  
    fi
done

#unset IFS
#EIRQS=$(cat /proc/interrupts | grep eth | awk '{print $1$15}')
# --- to make generic based on number of cores, location is 3 greater in proc/interrupts
CORES=`nproc --all`
echo "number of cores are $CORES"
EIRQS=$(cat /proc/interrupts | grep eth | awk '{print $1$'$((CORES+3))'}')
echo All Discovered Ethernet IRQS: $EIRQS
x=0
#--- ASSIGN INTERFACES TO ARRAY FOR PROCESSING
for i in $EIRQS; do 
    eth[x]=$i
    x=$((x+1))
done

#--- PRINT THE WHOLE ARRAY.
echo Double-check ethernet irqs:'  ' ${eth[@]}

#--- SET THE SEPERATOR TO :
IFS=$':'
# --- FIND OPTIONS SET
if [ -s "/etc/default/mark6" ];  then 
    OPTS=$(awk '$1~/^MK6_OPTS=/ {print $0;exit;}' /etc/default/mark6 | cut -d= -f2)
fi
if [ -z "$OPTS" ] ; then
    OPTS="eth2:eth3:eth4:eth5"
fi
echo "MK6_OPTS is $OPTS"

OP=($OPTS)
len_OP=${#OP[@]} 
# -- shift the mask past the sas irqs and the ones used by the spooler
if [[ $len_OP == 2 ]] ; then
    mask=$(( mask * 4))
    echo "setting mask to $mask for $len_OP eth ports"
elif [[ $len_OP == 1 ]] ; then
    mask=$(( mask * 2))
    echo "setting mask at $mask for $len_OP eth ports"
else
    # mask unchanged for 4 or other cases (you loose)
    echo "leaving mask at $mask for $len_OP eth ports"
fi

IFS=$' '
echo "eth[@] ${eth[@]}"
for I in ${eth[@]}; do 
    IFS=':' eth_split=($I)
    eif=${eth_split[1]}
    echo "eif -> $eif "
    if [[ $eif  =~ "eth0" ]] || [[ $eif  =~ "eth1" ]]; then 
        printf "(ignoring %s)\n" "$eif"
    else
        irq=${eth_split[0]}

	for (( i=0; i < ${#OP[@]} ; i++)); do
            #echo "op $i, ${OP[$i]}"

	    if [[ ${OP[$i]} =~ $eif ]];
	    then
		echo -n "assigning $mask to $eif to irq $irq : 0x"
		echo $(printf "%x" $mask) >> /proc/irq/$irq/smp_affinity 
		cat /proc/irq/$irq/smp_affinity
		mask=$(( mask * 2 ))
		if [ $mask -ge $limit ]; then
		    mask=1  
		fi
	    fi
	done
    fi
done

exit 0
