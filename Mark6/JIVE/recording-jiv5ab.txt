
---- Harro, 21.09.2017

Looks like you're on the right path! In short: no the initial loss is not actually expected.

Because I don't know exactly what you've done so far, I may be stating 
the obvious below, apologies in advance. Thing is that 16Gbps does 
require a fair bit of configuring, not difficult but all necessary, 
otherwise packets are lost.

Initial packet loss could be caused by not having set the Linux buffers 
large enough and also you have to make sure that dplane is not running!

Also making sure that the network card interrupts are serviced by one 
core (or each network card assigned to a specific core, that is best). 
And you must make sure that jive5ab is running on the remaining core(s) 
of the same physical CPU. (And make sure that hyperthreading is switched 
off - these HT cores are fine for computing but for I/O they're absolute 
worthless and actually make it worse.)

On the Mark6 it is automatically started as a service, I have noticed. 
But it hogs so many resources that ~8Gbps jive5ab can do with the 
remainder but 16 is out of the question.

Concerning your configuration: set nthread to ~4. That should be enough. 
I have noticed that if the number of disk writers gets too large you 
actually get a decrease in throughput - the threads are (apparently?) 
fighting for the resources. We could (easily) sustain with 3 to 4 
writers.

---------------------------------------------------------------------------------

If network tuning config file not yet installed:

root$ cat ../sysctl/mixed.conf >> /etc/sysctl.conf
root$ /sbin/sysctl --system
  or
root$ cat ../sysctl/mixed.conf >> /etc/sysctl.conf
root$ /sbin/sysctl -p

If da-client bug ("-p <portnr" parse bug) not yet fixed:

$ sudo nano /usr/bin/da-client
   opts, pargs = getopt.getopt(sys.argv[1:], "h:p")
   --> should contain 'p:' to parse the -p <portnr> command line arg
   opts, pargs = getopt.getopt(sys.argv[1:], "h:p:")

To start jive5ab:

$ sudo /etc/init.d/dplane stop
$ m6sg_mount
$ jivemark5a -m 2 -6 -f mk6

Start DBBC3

Check that data is arriving at Mark6

   the DBBC3 10G config must have the correct destination IP+MAC addresses
   so that 'jive5ab' is able to receive it (UDP capture), however
   it is less critical for 'dplane' (raw packet capture)

$ vdiftimeUDP --offset=8 --thread=0 46227
$ vdiftimeUDP --offset=8 --thread=1 46227
$ vdiftimeUDP --offset=8 --thread=2 46227
$ vdiftimeUDP --offset=8 --thread=3 46227
   (should show data arriving)

Or start R2DBE

vlbi1$ /etc/r2de/APEX_r2dbe1_setup.sh
vlbi$ /etc/r2de/APEX_r2dbe2_setup.sh

vlbi1$ vdiftimeUDP --offset=8 --thread=0 4001
vlbi1$ vdiftimeUDP --offset=8 --thread=2 4001
   or 
vlbi2$ vdiftimeUDP --offset=8 --thread=1 4001
vlbi2$ vdiftimeUDP --offset=8 --thread=3 4001

---------------------------------------------------------------------------------

Recording setup

  vlbi1$ da-client -p 2620
    or
  vlbimc$ da-client -p 2620 -h vlbi1

with commands

net_protocol=udpsnor : 768M : 256M : 4;
mtu = 9000;
net_port = 46227;
set_disks = 1:2:3:4;
record = mk6 : 1;
record = nthread : : 4 ;
mode = VDIF_8192-4096-1-2;

   Notes:
      record = mk6 : 1                           :: 0=flexbuff format, 1=Mark6 scatter-gather format
      record = nthread : <nreaders> : <nwriters> :: around 3 or 4 writers for 16 Gbit/s, more becomes counterproductive
      evlbi?                                     :: returns the loss% statistics of an ongoing recording

      net_protocol = udpsnor : 768M : 256M : 4   :: UDP+S(equence nr) capture with NoR(eordering), but with statistics from up to 8 sources
                                                    768M for Linux socket buffer size
                                                    256M for fragment or segment size to record (10000000 for Haystack Mark6 dplane, for FlexBuff >=128M)

Test recording from DBBC3 (UDP port 46227)

net_port = 46227;
record = on : j5dbbc01 ;
evlbi?
record = off ;

Test recording from R2DBE (UDP port 4001)

net_port = 4001;
record = on : j5rdbe01 ;
evlbi?
record = off ;

Checking what we got

record=off;

vlbi1$ fuseMk6 -r "/mnt/disks/?/?/data/" /mnt/group1234/
Found 256 scans, and 255 entries in JSON

vlbi1$ vdifcontinuitycheck.py /mnt/group1234/j5rdbe01
Thread 0 Second 7220328 :  43588 frames : #81412--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 43588 total
Thread 2 Second 7220328 :  43584 frames : #81416--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 43584 total
Thread 0 Second 7220329 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
Thread 2 Second 7220329 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
Thread 0 Second 7220330 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
Thread 2 Second 7220330 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
Thread 0 Second 7220331 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
Thread 2 Second 7220331 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
...
Thread 0 Second 7220358 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
Thread 2 Second 7220358 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
Thread 0 Second 7220359 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
Thread 2 Second 7220359 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
Thread 0 Second 7220360 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
Thread 2 Second 7220360 : 125000 frames : #0--#124999 : 0 lost, 0 out-of-order, 0 invalid, of 125000 total
...

vlbi1$ fusermount -u /mnt/group1234/

