 /* usr2/st/stqkr/stqkr.c
 *  last mod. 07/11/00, zei.
 * stqkr - C version of station command controller
 * 
*/
#include <stdio.h>
#include <string.h>
#include <sys/types.h>

#include "/usr2/fs/include/params.h"
#include "/usr2/fs/include/fs_types.h"
#include "/usr2/fs/include/fscom.h"
#include "/usr2/fs/include/shm_addr.h"      /* shared memory pointer */

struct stcom *st;
struct fscom *fs;

#define MAX_BUF   257

char old_Line[255]; int rh_to=5; /* ext var for relheiht.c */ 
main()
{
    long ip[5];
    int isub,itask,idum,ierr,nchars,i;
    char buf[MAX_BUF];
    struct cmd_ds command;
    int cls_rcv(), cmd_parse();
    void skd_wait();
   
    
/* Set up IDs for shared memory, then assign the pointer to
 * "fs", for readability.
 */

  setup_ids();
  fs = shm_addr;
  
  setup_st(); 
  
  loop:
      skd_wait("stqkr",ip,(unsigned) 0);
      if(ip[0]==0) {
        ierr=-1;
        goto error;
      }

      nchars=cls_rcv(ip[0],buf,MAX_BUF,&idum,&idum,0,0);
      if(nchars==MAX_BUF && buf[nchars-1] != '\0' ) { /*does it fit?*/
        ierr=-2;
        goto error;
      }
                                   /* null terminate to be sure */
      if(nchars < MAX_BUF && buf[nchars-1] != '\0') buf[nchars]='\0';

      if(0 != (ierr = cmd_parse(buf,&command))) { /* parse it */
        ierr=-3;
        goto error;
      } 
  

      isub = ip[1]/100;
      itask = ip[1] - 100*isub;
      
      /* printf("in stqkr: ip[1]=%d, isub= %d, itask = %d\n",ip[1],isub, itask); 
      */ 
            switch (ip[1]) {     /*  mod 07.12.00, switch cond. original 'isub' */
         case 101:
               wx(&command,itask,ip);
               break;
         case 102:      
               wxz(&command,itask,ip);
               break;
         case 201:
               cable(&command,itask,ip);
               break;
         case 202:      
               counter2(&command,itask,ip);
               break;
         case 203:      
               relheight(&command,itask,ip);      	
               break;
         case 301: 
               point (&command,itask,ip);
               break;
         case 302:
               mpoint(&command,itask,ip);      
               break;   
         case 401:
               tk(&command,itask,ip);
               break;
         case 402:
               ptlog(&command,itask,ip);
               break;
         case 5:
            break;
         case 6:
            break;
         case 7:
            break;     
         case 8:
            break;
         case 9:
            break; 	                      
         default:
            ierr=-6;
            goto error;
      }
      goto loop;

error:
      for (i=0;i<5;i++) ip[i]=0;
      ip[2]=ierr;
      memcpy(ip+3,"st",2);
      goto loop;
}
